
filter {

  # https://www.elastic.co/guide/en/logstash/current/_how_to_write_a_logstash_filter_plugin.html
  # https://github.com/logstash-plugins/logstash-filter-split/blob/master/lib/logstash/filters/split.rb
  if [type] == "FeatureCollection" {
    split_featurecollection {}

    # ruby {
    #   init => "require 'logstash/filters/base'
    #     require 'logstash/namespace'"
    #   code => "
    #     @logger.debug('Spliting FeatureCollection')
    #     event['features'].each do |feature|
    #       event_feature = LogStash::Event.new(feature)
    #       # decorate(event_feature)
    #       filter_matched(event_feature)
    #       yield event_feature
    #     end
    #     event.cancel
    #   "
    # }
  }

  #if [location][geo][@type] == "GeoCoordinates" {
  if [location][geo][longitude] {
    #ruby { code => "event['geometry'] = { 'type' => 'Point', 'coordinates' => event['location']['coordinates'] }" }
    ruby { code => "event['geometry'] = { 'type' => 'Point', 'coordinates' => [ event['location']['geo']['longitude'], event['location']['geo']['latitude'] ] }" }
  }

    #{
    #  "type": "Point",
    #  "coordinates": [
    #    7.6302721,
    #    51.9607274
    #  ]
    #}
    #location.geo.latitude
    #location.geo.longitude

  if [garage] {
    mutate { replace => { type => "parking-api-v1" } }

    ruby { code => "event['location']['geo_shape'] = event['location']" }

    if [location][geo_shape][type] == "point" {
      ruby { code => "event['geo_point'] = event['location']['coordinates']" }
    }
  }

  if [@type] == "Event___" {
    # mutate { replace => { type => "parking-api-v1" } } #FIXME event-api-v1?

    if ([location][address][streetAddress]) {
      mutate {
        add_field => {
          geocoder_address => "%{[location][address][streetAddress]}, %{[location][address][postalCode]}, %{[location][address][addressLocality]}"
        }
      }
      geocoder {
        source => "[geocoder_address]"
        target => "[geo_point_geocoder]"
        lookup => "google"
        cache_size => 100
      }
      ruby { code => "event['location']['geo_point_geocoder'] = [event['geo_point_geocoder'][1], event['geo_point_geocoder'][0]]" }
      ruby { code => "event['location']['geo_shape_geocoder'] = { 'type' => 'point', 'coordinates' => event['location']['geo_point_geocoder'] }" }
    }

    if ([location][geo][latitude]) {
      # Everybody gets caught at least once: string geo-points are "latitude,longitude", while array geo-points are [longitude,latitude]â€”the opposite order!
      # mutate { add_field => { geo_point => "%{[location][geo][latitude]}, %{[location][geo][longitude]}" } }

      ruby { code => "event['geo_point'] = [event['location']['geo']['longitude'], event['location']['geo']['latitude']]" }
    }

    fingerprint {
      # source => ["message"]
      source => ["startDate", "name", "description", "url", "geocoder_address"]
      # target => "fingerprint"
      key => "why-exactly?"
      # method => "SHA256"
      concatenate_sources => true
    }
  }

  # ruby {
  #   init => "require "
  #   code => "
  #   # fast_generate(obj, opts = nil)
  #   puts
  #   "
  # }

}
